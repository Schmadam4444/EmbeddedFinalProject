using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace IoT_F22
{

    public partial class Form1 : Form
    {
        int startflag = 0;
        int flag_sensor;
        string RxString;
        string temp, voice = "0";
        char charb = 'B';
        String close = "a";

        public Form1()
        {

            InitializeComponent();
        }

        private void Serial_start_Click(object sender, EventArgs e)
        {
            serialPort1.PortName = "COM5";
            serialPort1.BaudRate = 115200;

            serialPort1.Open();
            if (serialPort1.IsOpen)
            {

                textBox1.ReadOnly = false;
            }

        }

        private void Serial_stop_Click(object sender, EventArgs e)
        {
            serialPort1.Close();

            textBox1.ReadOnly = true;

        }

        private void Read_TS_Click(object sender, EventArgs e)
        {
            WebClient client = new WebClient();



            label1.Text = client.DownloadString("https://api.thingspeak.com/update?api_key=O5COF9BOU3VOW2C9&field1=0");//use your channel id

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void Current_Data_Click(object sender, EventArgs e)
        {
            textBox1.Clear();
            textBox1.AppendText(close );
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (!string.Equals(textBox1.Text, ""))
            {
                if (serialPort1.IsOpen) serialPort1.Close();
                try
                {
                    if (1==1)
                    {
                        flag_sensor = 10;
                    }
                    const string WRITEKEY = "O5COF9BOU3VOW2C9"; ////use your channel API keys
                    string strUpdateBase = "http://api.thingspeak.com/update";
                    string strUpdateURI = strUpdateBase + "?key=" + WRITEKEY;
                    string strField1 = textBox1.Text;
                    //string strField1 = Motion;
                    //string strField2 = Light;
                    //string strField3 = Temperature;
                    HttpWebRequest ThingsSpeakReq;
                    HttpWebResponse ThingsSpeakResp;


                    if (1== 1)
                    {
                        strUpdateURI += "&field1=" + close;
                        //strUpdateURI += "&field1=" + Temperature;
                    }
                     /*else if (flag_sensor == 12)
                     {
                       //  strUpdateURI += "&field2=" + Light;
                          strUpdateURI += "&field2=" + strField1;
                     }
                     else if (flag_sensor == 13)
                     {
                        strUpdateURI += "&field3=" + strField1;
                        //strUpdateURI += "&field3=" + Motion;
                     }
                    else
                    {

                    }
                    */
                    flag_sensor++;
                    ThingsSpeakReq = (HttpWebRequest)WebRequest.Create(strUpdateURI);

                    ThingsSpeakResp = (HttpWebResponse)ThingsSpeakReq.GetResponse();
                    ThingsSpeakResp.Close();

                    if (!(string.Equals(ThingsSpeakResp.StatusDescription,"OK")))
                    {
                        Exception exData = new Exception(ThingsSpeakResp.StatusDescription);
                        throw exData;
                    }

                }
                catch (Exception ex)
                {

                }
                textBox1.Text = "";
                serialPort1.Open();
            }

        }

        private void SerialPort1_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {

            //B1
            
            Console.WriteLine("Data Received");
            RxString = serialPort1.ReadExisting();
            if(RxString.Length > 20)
            {
                if (RxString.Substring(RxString.Length - 20, 19).Contains('0'))
                {
                    close = "0";
                }
                else
                {
                    close = "1";
                }
            }
            
           // motion = RxString.Substring()
            if (RxString.Contains(charb))
            {
                startflag = 9;
            }
            else { }

            if (startflag == 9)
            {
                startflag++;
            }

            else if (startflag == 10)
            {
                temp = RxString;
                startflag++;
            }
            else if (startflag == 11)
            {
                voice = RxString;
                startflag++;
            }

            else
            {
                // startflag = 0;
            }

            this.Invoke(new EventHandler(Current_Data_Click));

        }

    }
}
