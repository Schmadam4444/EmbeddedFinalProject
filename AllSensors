#include <msp430.h>
#include <math.h>


volatile float photosensor_adc_value;
volatile float Light; //on a scale of 1 - 100

void UARTSetup();
void writeChar(unsigned char data);

int Motion;

int i;
int j;
int position;

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;  // Stop watchdog timer

    TB0CCTL0 |= CCIE;                                             // TBCCR0 interrupt enabled
    TB0CCR0 = 65535;
    TB0CTL = TBSSEL__ACLK | MC__UP;  // ACLK, UP mode

    P1DIR |= BIT0;
    P1OUT &= ~BIT0;

    P1SEL0 |=BIT1;
    P1SEL1 |=BIT1;

    ADCCTL0 = ADCSHT_2 | ADCON;  // set sample
    ADCCTL1 = ADCSHP | ADCCONSEQ_0;  // sampling timer
    ADCMCTL0 = ADCINCH_1;  // input P1.2

    // Configure P1.2 as an input with a pull-up resistor
    P1DIR &= ~BIT2;  // Set P1.2 to input mode

    UARTSetup();

    char tx[2]; //2char string
    tx[0] = 'B'; //First character letter b

    while (1)
    {
        if (P1IN & BIT2)  // Check if P1.2 is high
        {
            // PIR sensor is detecting motion
            // Perform some action here (e.g., turn on an LED, output a value, etc.)

            Motion = 1;
            P1OUT |= BIT0;

        }
        else
        {
            // PIR sensor is not detecting motion
            // Perform some action here (e.g., turn off the LED, output a different value, etc.)

            Motion = 0;
            P1OUT &= ~BIT0;
        }

        ADCCTL0 |= ADCENC | ADCSC;  // enable conversion and start conversion

            while (ADCCTL1 & ADCBUSY);  // wait for conversion to complete

            photosensor_adc_value = (ADCMEM0);  // read the ADC value

            Light = (((photosensor_adc_value - 1000)/(10))*(-1)); //putting the light on a scale of 1% to 100% brightness level

        tx[1] = Motion + 48; // + 48 asci
        for (position = 0; position < sizeof(tx); position++)
        {
            writeChar(tx[position]);
            for (i = 0; i < 100; i++)
            {
            }
        }
        {

        }
    }

}

void UARTSetup()
{
    UCA1CTLW0 |= UCSWRST;

    UCA1CTLW0 |= UCSSEL__SMCLK;
    UCA1BRW = 8;
    UCA1MCTLW = 0xD600;

    P4SEL1 &= ~BIT3;
    P4SEL0 |= BIT3;

    PM5CTL0 &= ~LOCKLPM5;

    UCA1CTLW0 &= ~UCSWRST;
}
void writeChar(unsigned char data)
{
    UCA1TXBUF = data;
    return;
}

// Timer B0 interrupt service routine
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = TIMER0_B0_VECTOR
__interrupt void Timer_B (void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(TIMER0_B0_VECTOR))) Timer_B (void)
#else
#error Compiler not supported!
#endif
{
    ADCCTL0 |= ADCENC | ADCSC;
}
